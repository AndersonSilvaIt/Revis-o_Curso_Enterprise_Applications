Adicionado uma Claim no banco de usuário, para implementar as validações de Claims

UserId: 011ab8ec-be7a-45d8-9d88-c793e4a0166e
ClaimType: Catalogo
ClaimValue: Ler

Utilizado a biblioteca Refit para consumo de HttpClient = API Rest no projeto MVC, para consumo de catálogo

Retry Pattern com Polly --> Para fazer retentativas de consumo de API

Circuit Breaker --> Usado para romper a comunicação após X tentativas...

Clliente / Usuário


Usuário criar um registro * API Autenticação *
* API Autenticação * Envia um registro na fila ( RabbitMQ ) para * API Cliente * escutar
* API Cliente * Escuta a fila do RabbitMQ e cadastra um novo cliente.
* API Cliente * Devolve uma mensagem na Fila (sucesso/erro)
* API Autenticação * Recebe a mensagem e mostra na tela.

* Criado o Command ClienteCommandHandler para registrar um cliente
* Criado o Evento ClienteRegistradoEvent para notificar a criação do cliente

Comando para criar a imagem do RabbitMQ para executar o projeto.

	docker run -d --hostname rabbit-host --name rabbit-nerdstore -p 15672:15672 -p 5672:5672 rabbitmq:management
	
	localhost:15672/
	RabbitMQ
	Login: guest
	Senha: guest


Aplicativos para verificar o docker
	* Docker Desktop
	* Portainer

Biblioteca para comunicação com o RabbitMQ
	* EasyNetQ